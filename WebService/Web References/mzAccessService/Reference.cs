//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace mzAccess.mzAccessService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MSDataServiceSoap", Namespace="http://mzaccess.org/DataService")]
    public partial class MSDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetChromatogramOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpectrumByScanNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpectrumByRTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanNumberFromRTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRTFromScanNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAverageSpectrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFragmentationEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMZRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRTRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChromatogramArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpectrumArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceRescanOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MSDataService() {
            this.Url = global::mzAccess.Properties.Settings.Default.mzAccess_mzAccessService_MSDataService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetChromatogramCompletedEventHandler GetChromatogramCompleted;
        
        /// <remarks/>
        public event GetSpectrumByScanNumberCompletedEventHandler GetSpectrumByScanNumberCompleted;
        
        /// <remarks/>
        public event GetSpectrumByRTCompletedEventHandler GetSpectrumByRTCompleted;
        
        /// <remarks/>
        public event GetScanNumberFromRTCompletedEventHandler GetScanNumberFromRTCompleted;
        
        /// <remarks/>
        public event GetRTFromScanNumberCompletedEventHandler GetRTFromScanNumberCompleted;
        
        /// <remarks/>
        public event GetAverageSpectrumCompletedEventHandler GetAverageSpectrumCompleted;
        
        /// <remarks/>
        public event GetAreaCompletedEventHandler GetAreaCompleted;
        
        /// <remarks/>
        public event GetFragmentationEventsCompletedEventHandler GetFragmentationEventsCompleted;
        
        /// <remarks/>
        public event GetMZRangeCompletedEventHandler GetMZRangeCompleted;
        
        /// <remarks/>
        public event GetRTRangeCompletedEventHandler GetRTRangeCompleted;
        
        /// <remarks/>
        public event FileListCompletedEventHandler FileListCompleted;
        
        /// <remarks/>
        public event GetChromatogramArrayCompletedEventHandler GetChromatogramArrayCompleted;
        
        /// <remarks/>
        public event GetSpectrumArrayCompletedEventHandler GetSpectrumArrayCompleted;
        
        /// <remarks/>
        public event GetAreaArrayCompletedEventHandler GetAreaArrayCompleted;
        
        /// <remarks/>
        public event ServiceRescanCompletedEventHandler ServiceRescanCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetChromatogram", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetChromatogram(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetChromatogram", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChromatogramAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache) {
            this.GetChromatogramAsync(FileName, MZLow, MZHigh, RTLow, RTHigh, Cache, null);
        }
        
        /// <remarks/>
        public void GetChromatogramAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache, object userState) {
            if ((this.GetChromatogramOperationCompleted == null)) {
                this.GetChromatogramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChromatogramOperationCompleted);
            }
            this.InvokeAsync("GetChromatogram", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache}, this.GetChromatogramOperationCompleted, userState);
        }
        
        private void OnGetChromatogramOperationCompleted(object arg) {
            if ((this.GetChromatogramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChromatogramCompleted(this, new GetChromatogramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetSpectrumByScanNumber", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetSpectrumByScanNumber(string FileName, double MZLow, double MZHigh, int ScanNumber, bool Cache, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetSpectrumByScanNumber", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        ScanNumber,
                        Cache,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpectrumByScanNumberAsync(string FileName, double MZLow, double MZHigh, int ScanNumber, bool Cache, bool Profile) {
            this.GetSpectrumByScanNumberAsync(FileName, MZLow, MZHigh, ScanNumber, Cache, Profile, null);
        }
        
        /// <remarks/>
        public void GetSpectrumByScanNumberAsync(string FileName, double MZLow, double MZHigh, int ScanNumber, bool Cache, bool Profile, object userState) {
            if ((this.GetSpectrumByScanNumberOperationCompleted == null)) {
                this.GetSpectrumByScanNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpectrumByScanNumberOperationCompleted);
            }
            this.InvokeAsync("GetSpectrumByScanNumber", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        ScanNumber,
                        Cache,
                        Profile}, this.GetSpectrumByScanNumberOperationCompleted, userState);
        }
        
        private void OnGetSpectrumByScanNumberOperationCompleted(object arg) {
            if ((this.GetSpectrumByScanNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpectrumByScanNumberCompleted(this, new GetSpectrumByScanNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetSpectrumByRT", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetSpectrumByRT(string FileName, double MZLow, double MZHigh, double RT, bool Cache, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetSpectrumByRT", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RT,
                        Cache,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpectrumByRTAsync(string FileName, double MZLow, double MZHigh, double RT, bool Cache, bool Profile) {
            this.GetSpectrumByRTAsync(FileName, MZLow, MZHigh, RT, Cache, Profile, null);
        }
        
        /// <remarks/>
        public void GetSpectrumByRTAsync(string FileName, double MZLow, double MZHigh, double RT, bool Cache, bool Profile, object userState) {
            if ((this.GetSpectrumByRTOperationCompleted == null)) {
                this.GetSpectrumByRTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpectrumByRTOperationCompleted);
            }
            this.InvokeAsync("GetSpectrumByRT", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RT,
                        Cache,
                        Profile}, this.GetSpectrumByRTOperationCompleted, userState);
        }
        
        private void OnGetSpectrumByRTOperationCompleted(object arg) {
            if ((this.GetSpectrumByRTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpectrumByRTCompleted(this, new GetSpectrumByRTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetScanNumberFromRT", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetScanNumberFromRT(string FileName, double RT, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetScanNumberFromRT", new object[] {
                        FileName,
                        RT,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanNumberFromRTAsync(string FileName, double RT, bool Cache) {
            this.GetScanNumberFromRTAsync(FileName, RT, Cache, null);
        }
        
        /// <remarks/>
        public void GetScanNumberFromRTAsync(string FileName, double RT, bool Cache, object userState) {
            if ((this.GetScanNumberFromRTOperationCompleted == null)) {
                this.GetScanNumberFromRTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanNumberFromRTOperationCompleted);
            }
            this.InvokeAsync("GetScanNumberFromRT", new object[] {
                        FileName,
                        RT,
                        Cache}, this.GetScanNumberFromRTOperationCompleted, userState);
        }
        
        private void OnGetScanNumberFromRTOperationCompleted(object arg) {
            if ((this.GetScanNumberFromRTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanNumberFromRTCompleted(this, new GetScanNumberFromRTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetRTFromScanNumber", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetRTFromScanNumber(string FileName, int ScanNumber, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetRTFromScanNumber", new object[] {
                        FileName,
                        ScanNumber,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetRTFromScanNumberAsync(string FileName, int ScanNumber, bool Cache) {
            this.GetRTFromScanNumberAsync(FileName, ScanNumber, Cache, null);
        }
        
        /// <remarks/>
        public void GetRTFromScanNumberAsync(string FileName, int ScanNumber, bool Cache, object userState) {
            if ((this.GetRTFromScanNumberOperationCompleted == null)) {
                this.GetRTFromScanNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRTFromScanNumberOperationCompleted);
            }
            this.InvokeAsync("GetRTFromScanNumber", new object[] {
                        FileName,
                        ScanNumber,
                        Cache}, this.GetRTFromScanNumberOperationCompleted, userState);
        }
        
        private void OnGetRTFromScanNumberOperationCompleted(object arg) {
            if ((this.GetRTFromScanNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRTFromScanNumberCompleted(this, new GetRTFromScanNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetAverageSpectrum", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetAverageSpectrum(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetAverageSpectrum", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAverageSpectrumAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Profile) {
            this.GetAverageSpectrumAsync(FileName, MZLow, MZHigh, RTLow, RTHigh, Profile, null);
        }
        
        /// <remarks/>
        public void GetAverageSpectrumAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Profile, object userState) {
            if ((this.GetAverageSpectrumOperationCompleted == null)) {
                this.GetAverageSpectrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAverageSpectrumOperationCompleted);
            }
            this.InvokeAsync("GetAverageSpectrum", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Profile}, this.GetAverageSpectrumOperationCompleted, userState);
        }
        
        private void OnGetAverageSpectrumOperationCompleted(object arg) {
            if ((this.GetAverageSpectrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAverageSpectrumCompleted(this, new GetAverageSpectrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetArea", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetArea(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetArea", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache, bool Profile) {
            this.GetAreaAsync(FileName, MZLow, MZHigh, RTLow, RTHigh, Cache, Profile, null);
        }
        
        /// <remarks/>
        public void GetAreaAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, bool Cache, bool Profile, object userState) {
            if ((this.GetAreaOperationCompleted == null)) {
                this.GetAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaOperationCompleted);
            }
            this.InvokeAsync("GetArea", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache,
                        Profile}, this.GetAreaOperationCompleted, userState);
        }
        
        private void OnGetAreaOperationCompleted(object arg) {
            if ((this.GetAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaCompleted(this, new GetAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetFragmentationEvents", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FragmentationInfo[] GetFragmentationEvents(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, out string ErrorMessage) {
            object[] results = this.Invoke("GetFragmentationEvents", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh});
            ErrorMessage = ((string)(results[1]));
            return ((FragmentationInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFragmentationEventsAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh) {
            this.GetFragmentationEventsAsync(FileName, MZLow, MZHigh, RTLow, RTHigh, null);
        }
        
        /// <remarks/>
        public void GetFragmentationEventsAsync(string FileName, double MZLow, double MZHigh, double RTLow, double RTHigh, object userState) {
            if ((this.GetFragmentationEventsOperationCompleted == null)) {
                this.GetFragmentationEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFragmentationEventsOperationCompleted);
            }
            this.InvokeAsync("GetFragmentationEvents", new object[] {
                        FileName,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh}, this.GetFragmentationEventsOperationCompleted, userState);
        }
        
        private void OnGetFragmentationEventsOperationCompleted(object arg) {
            if ((this.GetFragmentationEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFragmentationEventsCompleted(this, new GetFragmentationEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetMZRange", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetMZRange(string FileName, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetMZRange", new object[] {
                        FileName,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMZRangeAsync(string FileName, bool Cache) {
            this.GetMZRangeAsync(FileName, Cache, null);
        }
        
        /// <remarks/>
        public void GetMZRangeAsync(string FileName, bool Cache, object userState) {
            if ((this.GetMZRangeOperationCompleted == null)) {
                this.GetMZRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMZRangeOperationCompleted);
            }
            this.InvokeAsync("GetMZRange", new object[] {
                        FileName,
                        Cache}, this.GetMZRangeOperationCompleted, userState);
        }
        
        private void OnGetMZRangeOperationCompleted(object arg) {
            if ((this.GetMZRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMZRangeCompleted(this, new GetMZRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetRTRange", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetRTRange(string FileName, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetRTRange", new object[] {
                        FileName,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRTRangeAsync(string FileName, bool Cache) {
            this.GetRTRangeAsync(FileName, Cache, null);
        }
        
        /// <remarks/>
        public void GetRTRangeAsync(string FileName, bool Cache, object userState) {
            if ((this.GetRTRangeOperationCompleted == null)) {
                this.GetRTRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRTRangeOperationCompleted);
            }
            this.InvokeAsync("GetRTRange", new object[] {
                        FileName,
                        Cache}, this.GetRTRangeOperationCompleted, userState);
        }
        
        private void OnGetRTRangeOperationCompleted(object arg) {
            if ((this.GetRTRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRTRangeCompleted(this, new GetRTRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/FileList", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] FileList(string FileMask, out string ErrorMessage) {
            object[] results = this.Invoke("FileList", new object[] {
                        FileMask});
            ErrorMessage = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void FileListAsync(string FileMask) {
            this.FileListAsync(FileMask, null);
        }
        
        /// <remarks/>
        public void FileListAsync(string FileMask, object userState) {
            if ((this.FileListOperationCompleted == null)) {
                this.FileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileListOperationCompleted);
            }
            this.InvokeAsync("FileList", new object[] {
                        FileMask}, this.FileListOperationCompleted, userState);
        }
        
        private void OnFileListOperationCompleted(object arg) {
            if ((this.FileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileListCompleted(this, new FileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetChromatogramArray", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDouble")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public double[][] GetChromatogramArray(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache, out string ErrorMessage) {
            object[] results = this.Invoke("GetChromatogramArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache});
            ErrorMessage = ((string)(results[1]));
            return ((double[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetChromatogramArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache) {
            this.GetChromatogramArrayAsync(FileNames, MZLow, MZHigh, RTLow, RTHigh, Cache, null);
        }
        
        /// <remarks/>
        public void GetChromatogramArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache, object userState) {
            if ((this.GetChromatogramArrayOperationCompleted == null)) {
                this.GetChromatogramArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChromatogramArrayOperationCompleted);
            }
            this.InvokeAsync("GetChromatogramArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache}, this.GetChromatogramArrayOperationCompleted, userState);
        }
        
        private void OnGetChromatogramArrayOperationCompleted(object arg) {
            if ((this.GetChromatogramArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChromatogramArrayCompleted(this, new GetChromatogramArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetSpectrumArray", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDouble")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public double[][] GetSpectrumArray(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetSpectrumArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpectrumArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Profile) {
            this.GetSpectrumArrayAsync(FileNames, MZLow, MZHigh, RTLow, RTHigh, Profile, null);
        }
        
        /// <remarks/>
        public void GetSpectrumArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Profile, object userState) {
            if ((this.GetSpectrumArrayOperationCompleted == null)) {
                this.GetSpectrumArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpectrumArrayOperationCompleted);
            }
            this.InvokeAsync("GetSpectrumArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Profile}, this.GetSpectrumArrayOperationCompleted, userState);
        }
        
        private void OnGetSpectrumArrayOperationCompleted(object arg) {
            if ((this.GetSpectrumArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpectrumArrayCompleted(this, new GetSpectrumArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/GetAreaArray", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDouble")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public double[][] GetAreaArray(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache, bool Profile, out string ErrorMessage) {
            object[] results = this.Invoke("GetAreaArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache,
                        Profile});
            ErrorMessage = ((string)(results[1]));
            return ((double[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache, bool Profile) {
            this.GetAreaArrayAsync(FileNames, MZLow, MZHigh, RTLow, RTHigh, Cache, Profile, null);
        }
        
        /// <remarks/>
        public void GetAreaArrayAsync(string[] FileNames, double[] MZLow, double[] MZHigh, double[] RTLow, double[] RTHigh, bool Cache, bool Profile, object userState) {
            if ((this.GetAreaArrayOperationCompleted == null)) {
                this.GetAreaArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaArrayOperationCompleted);
            }
            this.InvokeAsync("GetAreaArray", new object[] {
                        FileNames,
                        MZLow,
                        MZHigh,
                        RTLow,
                        RTHigh,
                        Cache,
                        Profile}, this.GetAreaArrayOperationCompleted, userState);
        }
        
        private void OnGetAreaArrayOperationCompleted(object arg) {
            if ((this.GetAreaArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaArrayCompleted(this, new GetAreaArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mzaccess.org/DataService/ServiceRescan", RequestNamespace="http://mzaccess.org/DataService", ResponseNamespace="http://mzaccess.org/DataService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ServiceRescan() {
            object[] results = this.Invoke("ServiceRescan", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceRescanAsync() {
            this.ServiceRescanAsync(null);
        }
        
        /// <remarks/>
        public void ServiceRescanAsync(object userState) {
            if ((this.ServiceRescanOperationCompleted == null)) {
                this.ServiceRescanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceRescanOperationCompleted);
            }
            this.InvokeAsync("ServiceRescan", new object[0], this.ServiceRescanOperationCompleted, userState);
        }
        
        private void OnServiceRescanOperationCompleted(object arg) {
            if ((this.ServiceRescanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceRescanCompleted(this, new ServiceRescanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2116.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mzaccess.org/DataService")]
    public partial class FragmentationInfo {
        
        private double rtField;
        
        private double parentMZField;
        
        private int scanNumberField;
        
        private int mSOrderField;
        
        private string descriptionField;
        
        /// <remarks/>
        public double RT {
            get {
                return this.rtField;
            }
            set {
                this.rtField = value;
            }
        }
        
        /// <remarks/>
        public double ParentMZ {
            get {
                return this.parentMZField;
            }
            set {
                this.parentMZField = value;
            }
        }
        
        /// <remarks/>
        public int ScanNumber {
            get {
                return this.scanNumberField;
            }
            set {
                this.scanNumberField = value;
            }
        }
        
        /// <remarks/>
        public int MSOrder {
            get {
                return this.mSOrderField;
            }
            set {
                this.mSOrderField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetChromatogramCompletedEventHandler(object sender, GetChromatogramCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChromatogramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChromatogramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSpectrumByScanNumberCompletedEventHandler(object sender, GetSpectrumByScanNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpectrumByScanNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpectrumByScanNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSpectrumByRTCompletedEventHandler(object sender, GetSpectrumByRTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpectrumByRTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpectrumByRTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanNumberFromRTCompletedEventHandler(object sender, GetScanNumberFromRTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanNumberFromRTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanNumberFromRTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetRTFromScanNumberCompletedEventHandler(object sender, GetRTFromScanNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRTFromScanNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRTFromScanNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAverageSpectrumCompletedEventHandler(object sender, GetAverageSpectrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAverageSpectrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAverageSpectrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAreaCompletedEventHandler(object sender, GetAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetFragmentationEventsCompletedEventHandler(object sender, GetFragmentationEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFragmentationEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFragmentationEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FragmentationInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FragmentationInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetMZRangeCompletedEventHandler(object sender, GetMZRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMZRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMZRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetRTRangeCompletedEventHandler(object sender, GetRTRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRTRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRTRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FileListCompletedEventHandler(object sender, FileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetChromatogramArrayCompletedEventHandler(object sender, GetChromatogramArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChromatogramArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChromatogramArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[][])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSpectrumArrayCompletedEventHandler(object sender, GetSpectrumArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpectrumArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpectrumArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[][])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAreaArrayCompletedEventHandler(object sender, GetAreaArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[][])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ServiceRescanCompletedEventHandler(object sender, ServiceRescanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceRescanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceRescanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591